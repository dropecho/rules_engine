// Generated by Haxe 4.0.5

#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class Array<T> : global::haxe.lang.HxObject, global::Array {
	
	static bool __hx_init_called = false;
	static Array() {
		if(global::Array<object>.__hx_init_called) return;
		global::Array<object>.__hx_init_called = true;
		unchecked{
			#line 33 "/usr/share/haxe/std/cs/_std/Array.hx"
			global::Array<object>.__hx_toString_depth = 0;
			global::Array<object>.__hx_defaultCapacity = 4;
		}
		
	}
	#line default
	
	public Array(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Array(T[] native) {
		#line 61 "/usr/share/haxe/std/cs/_std/Array.hx"
		global::Array<object>.__hx_ctor__Array<T>(((global::Array<T>) (this) ), ((T[]) (native) ));
	}
	#line default
	
	public Array() {
		#line 50 "/usr/share/haxe/std/cs/_std/Array.hx"
		global::Array<object>.__hx_ctor__Array<T>(((global::Array<T>) (this) ));
	}
	#line default
	
	private static void __hx_ctor__Array<T_c>(global::Array<T_c> __hx_this, T_c[] native) {
		#line 62 "/usr/share/haxe/std/cs/_std/Array.hx"
		__hx_this.length = ( native as global::System.Array ).Length;
		__hx_this.__a = native;
	}
	#line default
	
	private static void __hx_ctor__Array<T_c>(global::Array<T_c> __hx_this) {
		#line 51 "/usr/share/haxe/std/cs/_std/Array.hx"
		__hx_this.length = 0;
		__hx_this.__a = new T_c[0];
	}
	#line default
	
	public static object __hx_cast<T_c_c>(global::Array me) {
		#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
		return ( (( me != null )) ? (me.Array_cast<T_c_c>()) : default(object) );
	}
	#line default
	
	public static int __hx_toString_depth;
	
	public static int __hx_defaultCapacity;
	
	public static global::Array<X> ofNative<X>(X[] native) {
		#line 42 "/usr/share/haxe/std/cs/_std/Array.hx"
		return new global::Array<X>(((X[]) (native) ));
	}
	#line default
	
	public static global::Array<Y> alloc<Y>(int size) {
		#line 47 "/usr/share/haxe/std/cs/_std/Array.hx"
		return new global::Array<Y>(((Y[]) (new Y[size]) ));
	}
	#line default
	
	public object Array_cast<T_c>() {
		unchecked {
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (global::haxe.lang.Runtime.eq(typeof(T), typeof(T_c))) {
				#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
				return this;
			}
			
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			global::Array<T_c> new_me = new global::Array<T_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			global::Array<string> fields = global::Reflect.fields(this);
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			int i = 0;
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			while (( i < fields.length )) {
				#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
				string field = fields[i++];
				#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
				switch (field) {
					case "__a":
					{
						#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
						if (( this.__a != null )) {
							#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
							T_c[] __temp_new_arr1 = new T_c[this.__a.Length];
							#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
							int __temp_i2 = -1;
							#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
							while ((  ++ __temp_i2 < this.__a.Length )) {
								#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
								object __temp_obj3 = ((object) (this.__a[__temp_i2]) );
								#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
								if (( __temp_obj3 != null )) {
									#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
									__temp_new_arr1[__temp_i2] = global::haxe.lang.Runtime.genericCast<T_c>(__temp_obj3);
								}
								
							}
							
							#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
							new_me.__a = __temp_new_arr1;
						}
						else {
							#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
							new_me.__a = null;
						}
						
						#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
						break;
					}
					
					
					default:
					{
						#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
						global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
						#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
						break;
					}
					
				}
				
			}
			
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			return new_me;
		}
		#line default
	}
	
	
	public int length;
	
	public T[] __a;
	
	public global::Array<T> concat(global::Array<T> a) {
		#line 68 "/usr/share/haxe/std/cs/_std/Array.hx"
		int len = ( this.length + a.length );
		T[] retarr = new T[len];
		#line 70 "/usr/share/haxe/std/cs/_std/Array.hx"
		global::System.Array.Copy(((global::System.Array) (this.__a) ), ((int) (0) ), ((global::System.Array) (retarr) ), ((int) (0) ), ((int) (this.length) ));
		global::System.Array.Copy(((global::System.Array) (a.__a) ), ((int) (0) ), ((global::System.Array) (retarr) ), ((int) (this.length) ), ((int) (a.length) ));
		#line 73 "/usr/share/haxe/std/cs/_std/Array.hx"
		return new global::Array<T>(((T[]) (retarr) ));
	}
	#line default
	
	public void concatNative(T[] a) {
		#line 77 "/usr/share/haxe/std/cs/_std/Array.hx"
		T[] __a = this.__a;
		int len = ( this.length + ( a as global::System.Array ).Length );
		#line 79 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( ( __a as global::System.Array ).Length >= len )) {
			#line 80 "/usr/share/haxe/std/cs/_std/Array.hx"
			global::System.Array.Copy(((global::System.Array) (a) ), ((int) (0) ), ((global::System.Array) (__a) ), ((int) (this.length) ), ((int) (this.length) ));
		}
		else {
			#line 82 "/usr/share/haxe/std/cs/_std/Array.hx"
			T[] newarr = new T[len];
			global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (0) ), ((int) (this.length) ));
			#line 84 "/usr/share/haxe/std/cs/_std/Array.hx"
			global::System.Array.Copy(((global::System.Array) (a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (this.length) ), ((int) (( a as global::System.Array ).Length) ));
			#line 86 "/usr/share/haxe/std/cs/_std/Array.hx"
			this.__a = newarr;
		}
		
		#line 89 "/usr/share/haxe/std/cs/_std/Array.hx"
		this.length = len;
	}
	#line default
	
	public int indexOf(T x, global::haxe.lang.Null<int> fromIndex) {
		unchecked {
			#line 93 "/usr/share/haxe/std/cs/_std/Array.hx"
			int len = this.length;
			#line 93 "/usr/share/haxe/std/cs/_std/Array.hx"
			int i = ( ( ! (fromIndex.hasValue) ) ? (0) : ((fromIndex).@value) );
			if (( i < 0 )) {
				#line 95 "/usr/share/haxe/std/cs/_std/Array.hx"
				i += len;
				if (( i < 0 )) {
					#line 97 "/usr/share/haxe/std/cs/_std/Array.hx"
					i = 0;
				}
				
			}
			else if (( i >= len )) {
				#line 99 "/usr/share/haxe/std/cs/_std/Array.hx"
				return -1;
			}
			
			#line 101 "/usr/share/haxe/std/cs/_std/Array.hx"
			return global::System.Array.IndexOf<T>(((T[]) (this.__a) ), global::haxe.lang.Runtime.genericCast<T>(x), ((int) (i) ), ((int) (( len - i )) ));
		}
		#line default
	}
	
	
	public int lastIndexOf(T x, global::haxe.lang.Null<int> fromIndex) {
		unchecked {
			#line 105 "/usr/share/haxe/std/cs/_std/Array.hx"
			int len = this.length;
			#line 105 "/usr/share/haxe/std/cs/_std/Array.hx"
			int i = ( ( ! (fromIndex.hasValue) ) ? (( len - 1 )) : ((fromIndex).@value) );
			if (( i >= len )) {
				#line 107 "/usr/share/haxe/std/cs/_std/Array.hx"
				i = ( len - 1 );
			}
			else if (( i < 0 )) {
				#line 109 "/usr/share/haxe/std/cs/_std/Array.hx"
				i += len;
				if (( i < 0 )) {
					#line 111 "/usr/share/haxe/std/cs/_std/Array.hx"
					return -1;
				}
				
			}
			
			#line 113 "/usr/share/haxe/std/cs/_std/Array.hx"
			return global::System.Array.LastIndexOf<T>(((T[]) (this.__a) ), global::haxe.lang.Runtime.genericCast<T>(x), ((int) (i) ), ((int) (( i + 1 )) ));
		}
		#line default
	}
	
	
	public string @join(string sep) {
		unchecked {
			#line 117 "/usr/share/haxe/std/cs/_std/Array.hx"
			global::System.Text.StringBuilder buf_b = new global::System.Text.StringBuilder();
			int i = -1;
			#line 120 "/usr/share/haxe/std/cs/_std/Array.hx"
			bool first = true;
			int length = this.length;
			#line 122 "/usr/share/haxe/std/cs/_std/Array.hx"
			while ((  ++ i < length )) {
				#line 123 "/usr/share/haxe/std/cs/_std/Array.hx"
				if (first) {
					#line 124 "/usr/share/haxe/std/cs/_std/Array.hx"
					first = false;
				}
				else {
					#line 126 "/usr/share/haxe/std/cs/_std/Array.hx"
					buf_b.Append(((string) (global::Std.@string(sep)) ));
				}
				
				#line 127 "/usr/share/haxe/std/cs/_std/Array.hx"
				buf_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.genericCast<T>(this.__a[i]))) ));
			}
			
			#line 130 "/usr/share/haxe/std/cs/_std/Array.hx"
			return buf_b.ToString();
		}
		#line default
	}
	
	
	public global::haxe.lang.Null<T> pop() {
		#line 134 "/usr/share/haxe/std/cs/_std/Array.hx"
		T[] __a = this.__a;
		int length = this.length;
		#line 136 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( length > 0 )) {
			#line 137 "/usr/share/haxe/std/cs/_std/Array.hx"
			T val = global::haxe.lang.Runtime.genericCast<T>(__a[ -- length]);
			__a[length] = default(T);
			#line 139 "/usr/share/haxe/std/cs/_std/Array.hx"
			this.length = length;
			#line 141 "/usr/share/haxe/std/cs/_std/Array.hx"
			return new global::haxe.lang.Null<T>(val, true);
		}
		else {
			#line 143 "/usr/share/haxe/std/cs/_std/Array.hx"
			return default(global::haxe.lang.Null<T>);
		}
		
	}
	#line default
	
	public int push(T x) {
		unchecked {
			#line 148 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (( this.length >= ( this.__a as global::System.Array ).Length )) {
				#line 149 "/usr/share/haxe/std/cs/_std/Array.hx"
				int newLen = ( (( this.length == 0 )) ? (4) : (( this.length << 1 )) );
				T[] newarr = new T[newLen];
				#line 151 "/usr/share/haxe/std/cs/_std/Array.hx"
				( this.__a as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
				#line 153 "/usr/share/haxe/std/cs/_std/Array.hx"
				this.__a = newarr;
			}
			
			#line 156 "/usr/share/haxe/std/cs/_std/Array.hx"
			this.__a[this.length] = x;
			return  ++ this.length;
		}
		#line default
	}
	
	
	public void reverse() {
		unchecked {
			#line 161 "/usr/share/haxe/std/cs/_std/Array.hx"
			int i = 0;
			int l = this.length;
			#line 163 "/usr/share/haxe/std/cs/_std/Array.hx"
			T[] a = this.__a;
			int half = ( l >> 1 );
			#line 165 "/usr/share/haxe/std/cs/_std/Array.hx"
			 -- l;
			while (( i < half )) {
				#line 167 "/usr/share/haxe/std/cs/_std/Array.hx"
				T tmp = global::haxe.lang.Runtime.genericCast<T>(a[i]);
				a[i] = global::haxe.lang.Runtime.genericCast<T>(a[( l - i )]);
				#line 169 "/usr/share/haxe/std/cs/_std/Array.hx"
				a[( l - i )] = tmp;
				 ++ i;
			}
			
		}
		#line default
	}
	
	
	public global::haxe.lang.Null<T> shift() {
		unchecked {
			#line 175 "/usr/share/haxe/std/cs/_std/Array.hx"
			int l = this.length;
			if (( l == 0 )) {
				#line 177 "/usr/share/haxe/std/cs/_std/Array.hx"
				return default(global::haxe.lang.Null<T>);
			}
			
			#line 179 "/usr/share/haxe/std/cs/_std/Array.hx"
			T[] a = this.__a;
			T x = global::haxe.lang.Runtime.genericCast<T>(a[0]);
			#line 181 "/usr/share/haxe/std/cs/_std/Array.hx"
			 -- l;
			global::System.Array.Copy(((global::System.Array) (a) ), ((int) (1) ), ((global::System.Array) (a) ), ((int) (0) ), ((int) (( this.length - 1 )) ));
			#line 183 "/usr/share/haxe/std/cs/_std/Array.hx"
			a[l] = default(T);
			this.length = l;
			#line 186 "/usr/share/haxe/std/cs/_std/Array.hx"
			return new global::haxe.lang.Null<T>(x, true);
		}
		#line default
	}
	
	
	public global::Array<T> slice(int pos, global::haxe.lang.Null<int> end) {
		#line 190 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( pos < 0 )) {
			#line 191 "/usr/share/haxe/std/cs/_std/Array.hx"
			pos = ( this.length + pos );
			if (( pos < 0 )) {
				#line 193 "/usr/share/haxe/std/cs/_std/Array.hx"
				pos = 0;
			}
			
		}
		
		#line 195 "/usr/share/haxe/std/cs/_std/Array.hx"
		if ( ! (end.hasValue) ) {
			#line 196 "/usr/share/haxe/std/cs/_std/Array.hx"
			end = new global::haxe.lang.Null<int>(this.length, true);
		}
		else if (( (end).@value < 0 )) {
			#line 198 "/usr/share/haxe/std/cs/_std/Array.hx"
			end = new global::haxe.lang.Null<int>(( this.length + (end).@value ), true);
		}
		
		#line 199 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( (end).@value > this.length )) {
			#line 200 "/usr/share/haxe/std/cs/_std/Array.hx"
			end = new global::haxe.lang.Null<int>(this.length, true);
		}
		
		#line 201 "/usr/share/haxe/std/cs/_std/Array.hx"
		int len = ( (end).@value - pos );
		if (( len < 0 )) {
			#line 203 "/usr/share/haxe/std/cs/_std/Array.hx"
			return new global::Array<T>();
		}
		
		#line 205 "/usr/share/haxe/std/cs/_std/Array.hx"
		T[] newarr = new T[len];
		global::System.Array.Copy(((global::System.Array) (this.__a) ), ((int) (pos) ), ((global::System.Array) (newarr) ), ((int) (0) ), ((int) (len) ));
		#line 208 "/usr/share/haxe/std/cs/_std/Array.hx"
		return new global::Array<T>(((T[]) (newarr) ));
	}
	#line default
	
	public void sort(global::haxe.lang.Function f) {
		unchecked {
			#line 212 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (( this.length == 0 )) {
				#line 213 "/usr/share/haxe/std/cs/_std/Array.hx"
				return;
			}
			
			#line 214 "/usr/share/haxe/std/cs/_std/Array.hx"
			this.quicksort(0, ( this.length - 1 ), f);
		}
		#line default
	}
	
	
	public void quicksort(int lo, int hi, global::haxe.lang.Function f) {
		unchecked {
			#line 218 "/usr/share/haxe/std/cs/_std/Array.hx"
			T[] buf = this.__a;
			int i = lo;
			int j = hi;
			#line 220 "/usr/share/haxe/std/cs/_std/Array.hx"
			T p = global::haxe.lang.Runtime.genericCast<T>(buf[( ( i + j ) >> 1 )]);
			while (( i <= j )) {
				#line 222 "/usr/share/haxe/std/cs/_std/Array.hx"
				while (( ( i < hi ) && ( ((int) (f.__hx_invoke2_f(default(double), global::haxe.lang.Runtime.genericCast<T>(buf[i]), default(double), p)) ) < 0 ) )) {
					#line 223 "/usr/share/haxe/std/cs/_std/Array.hx"
					 ++ i;
				}
				
				#line 224 "/usr/share/haxe/std/cs/_std/Array.hx"
				while (( ( j > lo ) && ( ((int) (f.__hx_invoke2_f(default(double), global::haxe.lang.Runtime.genericCast<T>(buf[j]), default(double), p)) ) > 0 ) )) {
					#line 225 "/usr/share/haxe/std/cs/_std/Array.hx"
					 -- j;
				}
				
				#line 226 "/usr/share/haxe/std/cs/_std/Array.hx"
				if (( i <= j )) {
					#line 227 "/usr/share/haxe/std/cs/_std/Array.hx"
					T t = global::haxe.lang.Runtime.genericCast<T>(buf[i]);
					buf[i++] = global::haxe.lang.Runtime.genericCast<T>(buf[j]);
					#line 229 "/usr/share/haxe/std/cs/_std/Array.hx"
					buf[j--] = t;
				}
				
			}
			
			#line 233 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (( lo < j )) {
				#line 234 "/usr/share/haxe/std/cs/_std/Array.hx"
				this.quicksort(lo, j, f);
			}
			
			#line 235 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (( i < hi )) {
				#line 236 "/usr/share/haxe/std/cs/_std/Array.hx"
				this.quicksort(i, hi, f);
			}
			
		}
		#line default
	}
	
	
	public global::Array<T> splice(int pos, int len) {
		#line 240 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( len < 0 )) {
			#line 241 "/usr/share/haxe/std/cs/_std/Array.hx"
			return new global::Array<T>();
		}
		
		#line 242 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( pos < 0 )) {
			#line 243 "/usr/share/haxe/std/cs/_std/Array.hx"
			pos = ( this.length + pos );
			if (( pos < 0 )) {
				#line 245 "/usr/share/haxe/std/cs/_std/Array.hx"
				pos = 0;
			}
			
		}
		
		#line 247 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( pos > this.length )) {
			#line 248 "/usr/share/haxe/std/cs/_std/Array.hx"
			pos = 0;
			len = 0;
		}
		else if (( ( pos + len ) > this.length )) {
			#line 251 "/usr/share/haxe/std/cs/_std/Array.hx"
			len = ( this.length - pos );
			if (( len < 0 )) {
				#line 253 "/usr/share/haxe/std/cs/_std/Array.hx"
				len = 0;
			}
			
		}
		
		#line 255 "/usr/share/haxe/std/cs/_std/Array.hx"
		T[] a = this.__a;
		#line 257 "/usr/share/haxe/std/cs/_std/Array.hx"
		T[] ret = new T[len];
		global::System.Array.Copy(((global::System.Array) (a) ), ((int) (pos) ), ((global::System.Array) (ret) ), ((int) (0) ), ((int) (len) ));
		#line 259 "/usr/share/haxe/std/cs/_std/Array.hx"
		global::Array<T> ret1 = new global::Array<T>(((T[]) (ret) ));
		#line 261 "/usr/share/haxe/std/cs/_std/Array.hx"
		int end = ( pos + len );
		global::System.Array.Copy(((global::System.Array) (a) ), ((int) (end) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( this.length - end )) ));
		#line 263 "/usr/share/haxe/std/cs/_std/Array.hx"
		this.length -= len;
		while ((  -- len >= 0 )) {
			#line 265 "/usr/share/haxe/std/cs/_std/Array.hx"
			a[( this.length + len )] = default(T);
		}
		
		#line 266 "/usr/share/haxe/std/cs/_std/Array.hx"
		return ret1;
	}
	#line default
	
	public void spliceVoid(int pos, int len) {
		#line 270 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( len < 0 )) {
			#line 271 "/usr/share/haxe/std/cs/_std/Array.hx"
			return;
		}
		
		#line 272 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( pos < 0 )) {
			#line 273 "/usr/share/haxe/std/cs/_std/Array.hx"
			pos = ( this.length + pos );
			if (( pos < 0 )) {
				#line 275 "/usr/share/haxe/std/cs/_std/Array.hx"
				pos = 0;
			}
			
		}
		
		#line 277 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( pos > this.length )) {
			#line 278 "/usr/share/haxe/std/cs/_std/Array.hx"
			pos = 0;
			len = 0;
		}
		else if (( ( pos + len ) > this.length )) {
			#line 281 "/usr/share/haxe/std/cs/_std/Array.hx"
			len = ( this.length - pos );
			if (( len < 0 )) {
				#line 283 "/usr/share/haxe/std/cs/_std/Array.hx"
				len = 0;
			}
			
		}
		
		#line 285 "/usr/share/haxe/std/cs/_std/Array.hx"
		T[] a = this.__a;
		#line 287 "/usr/share/haxe/std/cs/_std/Array.hx"
		int end = ( pos + len );
		global::System.Array.Copy(((global::System.Array) (a) ), ((int) (end) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( this.length - end )) ));
		#line 289 "/usr/share/haxe/std/cs/_std/Array.hx"
		this.length -= len;
		while ((  -- len >= 0 )) {
			#line 291 "/usr/share/haxe/std/cs/_std/Array.hx"
			a[( this.length + len )] = default(T);
		}
		
	}
	#line default
	
	public string toString() {
		unchecked {
			#line 295 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (( global::Array<object>.__hx_toString_depth >= 5 )) {
				#line 296 "/usr/share/haxe/std/cs/_std/Array.hx"
				return "...";
			}
			
			#line 298 "/usr/share/haxe/std/cs/_std/Array.hx"
			 ++ global::Array<object>.__hx_toString_depth;
			try {
				#line 300 "/usr/share/haxe/std/cs/_std/Array.hx"
				string s = this.__hx_toString();
				 -- global::Array<object>.__hx_toString_depth;
				#line 302 "/usr/share/haxe/std/cs/_std/Array.hx"
				return s;
			}
			catch (global::System.Exception catchallException){
				#line 299 "/usr/share/haxe/std/cs/_std/Array.hx"
				global::haxe.lang.Exceptions.exception = catchallException;
				#line 303 "/usr/share/haxe/std/cs/_std/Array.hx"
				object e = ( (( catchallException is global::haxe.lang.HaxeException )) ? (((global::haxe.lang.HaxeException) (catchallException) ).obj) : ((object) (catchallException) ) );
				 -- global::Array<object>.__hx_toString_depth;
				#line 305 "/usr/share/haxe/std/cs/_std/Array.hx"
				throw global::haxe.lang.HaxeException.wrap(e);
			}
			
			
		}
		#line default
	}
	
	
	public string __hx_toString() {
		#line 311 "/usr/share/haxe/std/cs/_std/Array.hx"
		global::System.Text.StringBuilder ret_b = new global::System.Text.StringBuilder();
		T[] a = this.__a;
		#line 313 "/usr/share/haxe/std/cs/_std/Array.hx"
		ret_b.Append(((string) ("[") ));
		bool first = true;
		#line 315 "/usr/share/haxe/std/cs/_std/Array.hx"
		{
			#line 315 "/usr/share/haxe/std/cs/_std/Array.hx"
			int _g = 0;
			#line 315 "/usr/share/haxe/std/cs/_std/Array.hx"
			int _g1 = this.length;
			#line 315 "/usr/share/haxe/std/cs/_std/Array.hx"
			while (( _g < _g1 )) {
				#line 315 "/usr/share/haxe/std/cs/_std/Array.hx"
				int i = _g++;
				if (first) {
					#line 317 "/usr/share/haxe/std/cs/_std/Array.hx"
					first = false;
				}
				else {
					#line 319 "/usr/share/haxe/std/cs/_std/Array.hx"
					ret_b.Append(((string) (",") ));
				}
				
				#line 320 "/usr/share/haxe/std/cs/_std/Array.hx"
				ret_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.genericCast<T>(a[i]))) ));
			}
			
		}
		
		#line 323 "/usr/share/haxe/std/cs/_std/Array.hx"
		ret_b.Append(((string) ("]") ));
		return ret_b.ToString();
	}
	#line default
	
	public void unshift(T x) {
		unchecked {
			#line 328 "/usr/share/haxe/std/cs/_std/Array.hx"
			T[] __a = this.__a;
			int length = this.length;
			#line 330 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (( length >= ( __a as global::System.Array ).Length )) {
				#line 331 "/usr/share/haxe/std/cs/_std/Array.hx"
				int newLen = ( (( length << 1 )) + 1 );
				T[] newarr = new T[newLen];
				#line 333 "/usr/share/haxe/std/cs/_std/Array.hx"
				global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (1) ), ((int) (length) ));
				#line 335 "/usr/share/haxe/std/cs/_std/Array.hx"
				this.__a = newarr;
			}
			else {
				#line 337 "/usr/share/haxe/std/cs/_std/Array.hx"
				global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (__a) ), ((int) (1) ), ((int) (length) ));
			}
			
			#line 340 "/usr/share/haxe/std/cs/_std/Array.hx"
			this.__a[0] = x;
			 ++ this.length;
		}
		#line default
	}
	
	
	public void insert(int pos, T x) {
		unchecked {
			#line 345 "/usr/share/haxe/std/cs/_std/Array.hx"
			int l = this.length;
			if (( pos < 0 )) {
				#line 347 "/usr/share/haxe/std/cs/_std/Array.hx"
				pos = ( l + pos );
				if (( pos < 0 )) {
					#line 349 "/usr/share/haxe/std/cs/_std/Array.hx"
					pos = 0;
				}
				
			}
			
			#line 351 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (( pos >= l )) {
				#line 352 "/usr/share/haxe/std/cs/_std/Array.hx"
				this.push(x);
				return;
			}
			else if (( pos == 0 )) {
				#line 355 "/usr/share/haxe/std/cs/_std/Array.hx"
				this.unshift(x);
				return;
			}
			
			#line 359 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (( l >= ( this.__a as global::System.Array ).Length )) {
				#line 360 "/usr/share/haxe/std/cs/_std/Array.hx"
				int newLen = ( (( this.length << 1 )) + 1 );
				T[] newarr = new T[newLen];
				#line 362 "/usr/share/haxe/std/cs/_std/Array.hx"
				global::System.Array.Copy(((global::System.Array) (this.__a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (0) ), ((int) (pos) ));
				newarr[pos] = x;
				#line 364 "/usr/share/haxe/std/cs/_std/Array.hx"
				global::System.Array.Copy(((global::System.Array) (this.__a) ), ((int) (pos) ), ((global::System.Array) (newarr) ), ((int) (( pos + 1 )) ), ((int) (( l - pos )) ));
				#line 366 "/usr/share/haxe/std/cs/_std/Array.hx"
				this.__a = newarr;
				 ++ this.length;
			}
			else {
				#line 369 "/usr/share/haxe/std/cs/_std/Array.hx"
				T[] __a = this.__a;
				global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (pos) ), ((global::System.Array) (__a) ), ((int) (( pos + 1 )) ), ((int) (( l - pos )) ));
				#line 371 "/usr/share/haxe/std/cs/_std/Array.hx"
				global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (__a) ), ((int) (0) ), ((int) (pos) ));
				__a[pos] = x;
				#line 373 "/usr/share/haxe/std/cs/_std/Array.hx"
				 ++ this.length;
			}
			
		}
		#line default
	}
	
	
	public bool @remove(T x) {
		unchecked {
			#line 378 "/usr/share/haxe/std/cs/_std/Array.hx"
			T[] __a = this.__a;
			int i = -1;
			#line 380 "/usr/share/haxe/std/cs/_std/Array.hx"
			int length = this.length;
			while ((  ++ i < length )) {
				#line 382 "/usr/share/haxe/std/cs/_std/Array.hx"
				if (global::haxe.lang.Runtime.eq(global::haxe.lang.Runtime.genericCast<T>(__a[i]), x)) {
					#line 383 "/usr/share/haxe/std/cs/_std/Array.hx"
					global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (( i + 1 )) ), ((global::System.Array) (__a) ), ((int) (i) ), ((int) (( ( length - i ) - 1 )) ));
					__a[ -- this.length] = default(T);
					#line 386 "/usr/share/haxe/std/cs/_std/Array.hx"
					return true;
				}
				
			}
			
			#line 390 "/usr/share/haxe/std/cs/_std/Array.hx"
			return false;
		}
		#line default
	}
	
	
	public global::Array<S> map<S>(global::haxe.lang.Function f) {
		#line 394 "/usr/share/haxe/std/cs/_std/Array.hx"
		global::Array<S> ret = new global::Array<S>(((S[]) (new S[this.length]) ));
		{
			#line 395 "/usr/share/haxe/std/cs/_std/Array.hx"
			int _g = 0;
			#line 395 "/usr/share/haxe/std/cs/_std/Array.hx"
			int _g1 = this.length;
			#line 395 "/usr/share/haxe/std/cs/_std/Array.hx"
			while (( _g < _g1 )) {
				#line 395 "/usr/share/haxe/std/cs/_std/Array.hx"
				int i = _g++;
				{
					#line 396 "/usr/share/haxe/std/cs/_std/Array.hx"
					S val = global::haxe.lang.Runtime.genericCast<S>(f.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<T>(this.__a[i])));
					#line 396 "/usr/share/haxe/std/cs/_std/Array.hx"
					ret.__a[i] = val;
				}
				
			}
			
		}
		
		#line 397 "/usr/share/haxe/std/cs/_std/Array.hx"
		return ret;
	}
	#line default
	
	public global::Array<T> filter(global::haxe.lang.Function f) {
		#line 401 "/usr/share/haxe/std/cs/_std/Array.hx"
		global::Array<T> ret = new global::Array<T>(new T[]{});
		{
			#line 402 "/usr/share/haxe/std/cs/_std/Array.hx"
			int _g = 0;
			#line 402 "/usr/share/haxe/std/cs/_std/Array.hx"
			int _g1 = this.length;
			#line 402 "/usr/share/haxe/std/cs/_std/Array.hx"
			while (( _g < _g1 )) {
				#line 402 "/usr/share/haxe/std/cs/_std/Array.hx"
				int i = _g++;
				T elt = global::haxe.lang.Runtime.genericCast<T>(this.__a[i]);
				#line 404 "/usr/share/haxe/std/cs/_std/Array.hx"
				if (global::haxe.lang.Runtime.toBool(f.__hx_invoke1_o(default(double), elt))) {
					#line 405 "/usr/share/haxe/std/cs/_std/Array.hx"
					ret.push(elt);
				}
				
			}
			
		}
		
		#line 407 "/usr/share/haxe/std/cs/_std/Array.hx"
		return ret;
	}
	#line default
	
	public global::Array<T> copy() {
		#line 411 "/usr/share/haxe/std/cs/_std/Array.hx"
		int len = this.length;
		T[] __a = this.__a;
		#line 413 "/usr/share/haxe/std/cs/_std/Array.hx"
		T[] newarr = new T[len];
		global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (0) ), ((int) (len) ));
		#line 415 "/usr/share/haxe/std/cs/_std/Array.hx"
		return new global::Array<T>(((T[]) (newarr) ));
	}
	#line default
	
	public object iterator() {
		#line 419 "/usr/share/haxe/std/cs/_std/Array.hx"
		return new global::_Array.ArrayIterator<T>(((global::Array<T>) (this) ));
	}
	#line default
	
	public void resize(int len) {
		#line 423 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (( this.length < len )) {
			#line 424 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (( ( this.__a as global::System.Array ).Length < len )) {
				#line 425 "/usr/share/haxe/std/cs/_std/Array.hx"
				global::System.Array.Resize<T>(ref this.__a, ((int) (len) ));
			}
			
			#line 427 "/usr/share/haxe/std/cs/_std/Array.hx"
			this.length = len;
		}
		else if (( this.length > len )) {
			#line 429 "/usr/share/haxe/std/cs/_std/Array.hx"
			this.spliceVoid(len, ( this.length - len ));
		}
		
	}
	#line default
	
	public T __get(int idx) {
		#line 434 "/usr/share/haxe/std/cs/_std/Array.hx"
		if (((bool) (( ((uint) (idx) ) >= this.length )) )) {
			#line 434 "/usr/share/haxe/std/cs/_std/Array.hx"
			return default(T);
		}
		else {
			#line 434 "/usr/share/haxe/std/cs/_std/Array.hx"
			return global::haxe.lang.Runtime.genericCast<T>(this.__a[idx]);
		}
		
	}
	#line default
	
	public T __set(int idx, T v) {
		unchecked {
			#line 438 "/usr/share/haxe/std/cs/_std/Array.hx"
			uint idx1 = ((uint) (idx) );
			T[] __a = this.__a;
			#line 440 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (((bool) (( idx1 >= ( __a as global::System.Array ).Length )) )) {
				#line 441 "/usr/share/haxe/std/cs/_std/Array.hx"
				uint len = ((uint) (( idx1 + 1 )) );
				if (((bool) (( idx1 == ( __a as global::System.Array ).Length )) )) {
					#line 443 "/usr/share/haxe/std/cs/_std/Array.hx"
					len = ((uint) (( (((uint) (( idx1 << 1 )) )) + 1 )) );
				}
				
				#line 444 "/usr/share/haxe/std/cs/_std/Array.hx"
				T[] newArr = new T[((int) (len) )];
				( __a as global::System.Array ).CopyTo(((global::System.Array) (newArr) ), ((int) (0) ));
				#line 446 "/usr/share/haxe/std/cs/_std/Array.hx"
				__a = newArr;
				#line 446 "/usr/share/haxe/std/cs/_std/Array.hx"
				this.__a = __a;
			}
			
			#line 449 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (((bool) (( idx1 >= this.length )) )) {
				#line 450 "/usr/share/haxe/std/cs/_std/Array.hx"
				this.length = ((int) (((uint) (( idx1 + 1 )) )) );
			}
			
			#line 452 "/usr/share/haxe/std/cs/_std/Array.hx"
			return __a[((int) (idx1) )] = v;
		}
		#line default
	}
	
	
	public T __unsafe_get(int idx) {
		#line 456 "/usr/share/haxe/std/cs/_std/Array.hx"
		return global::haxe.lang.Runtime.genericCast<T>(this.__a[idx]);
	}
	#line default
	
	public T __unsafe_set(int idx, T val) {
		#line 460 "/usr/share/haxe/std/cs/_std/Array.hx"
		return this.__a[idx] = val;
	}
	#line default
	
	public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
		unchecked {
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			switch (hash) {
				case 520590566:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.length = ((int) (@value) );
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return @value;
				}
				
				
				default:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return base.__hx_setField_f(field, hash, @value, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
		unchecked {
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			switch (hash) {
				case 4745537:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.__a = ((T[]) (@value) );
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return @value;
				}
				
				
				case 520590566:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.length = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return @value;
				}
				
				
				default:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return base.__hx_setField(field, hash, @value, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
		unchecked {
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			switch (hash) {
				case 1621420777:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "__unsafe_set", 1621420777)) );
				}
				
				
				case 1620824029:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "__unsafe_get", 1620824029)) );
				}
				
				
				case 1916009602:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "__set", 1916009602)) );
				}
				
				
				case 1915412854:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "__get", 1915412854)) );
				}
				
				
				case 142301684:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "resize", 142301684)) );
				}
				
				
				case 328878574:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "iterator", 328878574)) );
				}
				
				
				case 1103412149:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "copy", 1103412149)) );
				}
				
				
				case 87367608:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "filter", 87367608)) );
				}
				
				
				case 5442204:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "map", 5442204)) );
				}
				
				
				case 76061764:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "remove", 76061764)) );
				}
				
				
				case 501039929:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "insert", 501039929)) );
				}
				
				
				case 2025055113:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "unshift", 2025055113)) );
				}
				
				
				case 946786476:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
				}
				
				
				case 1352786672:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "spliceVoid", 1352786672)) );
				}
				
				
				case 1067353468:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "splice", 1067353468)) );
				}
				
				
				case 1282943179:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "quicksort", 1282943179)) );
				}
				
				
				case 1280845662:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "sort", 1280845662)) );
				}
				
				
				case 2127021138:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "slice", 2127021138)) );
				}
				
				
				case 2082663554:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "shift", 2082663554)) );
				}
				
				
				case 452737314:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "reverse", 452737314)) );
				}
				
				
				case 1247875546:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "push", 1247875546)) );
				}
				
				
				case 5594513:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pop", 5594513)) );
				}
				
				
				case 1181037546:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "join", 1181037546)) );
				}
				
				
				case 359333139:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "lastIndexOf", 359333139)) );
				}
				
				
				case 1623148745:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "indexOf", 1623148745)) );
				}
				
				
				case 1532710347:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "concatNative", 1532710347)) );
				}
				
				
				case 1204816148:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "concat", 1204816148)) );
				}
				
				
				case 4745537:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.__a;
				}
				
				
				case 520590566:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.length;
				}
				
				
				default:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
		unchecked {
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			switch (hash) {
				case 520590566:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return ((double) (this.length) );
				}
				
				
				default:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override object __hx_invokeField(string field, int hash, object[] dynargs) {
		unchecked {
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			switch (hash) {
				case 1621420777:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.__unsafe_set(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Runtime.genericCast<T>(dynargs[1]));
				}
				
				
				case 1620824029:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.__unsafe_get(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
				}
				
				
				case 1916009602:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.__set(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Runtime.genericCast<T>(dynargs[1]));
				}
				
				
				case 1915412854:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.__get(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
				}
				
				
				case 142301684:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.resize(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					break;
				}
				
				
				case 328878574:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.iterator();
				}
				
				
				case 1103412149:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.copy();
				}
				
				
				case 87367608:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.filter(((global::haxe.lang.Function) (dynargs[0]) ));
				}
				
				
				case 5442204:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.map<object>(((global::haxe.lang.Function) (dynargs[0]) ));
				}
				
				
				case 76061764:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.@remove(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]));
				}
				
				
				case 501039929:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.insert(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Runtime.genericCast<T>(dynargs[1]));
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					break;
				}
				
				
				case 2025055113:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.unshift(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]));
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					break;
				}
				
				
				case 946786476:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.toString();
				}
				
				
				case 1352786672:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.spliceVoid(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					break;
				}
				
				
				case 1067353468:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.splice(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
				}
				
				
				case 1282943179:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.quicksort(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((global::haxe.lang.Function) (dynargs[2]) ));
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					break;
				}
				
				
				case 1280845662:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.sort(((global::haxe.lang.Function) (dynargs[0]) ));
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					break;
				}
				
				
				case 2127021138:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.slice(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Null<object>.ofDynamic<int>(( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )));
				}
				
				
				case 2082663554:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return (this.shift()).toDynamic();
				}
				
				
				case 452737314:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.reverse();
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					break;
				}
				
				
				case 1247875546:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.push(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]));
				}
				
				
				case 5594513:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return (this.pop()).toDynamic();
				}
				
				
				case 1181037546:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.@join(global::haxe.lang.Runtime.toString(dynargs[0]));
				}
				
				
				case 359333139:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.lastIndexOf(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]), global::haxe.lang.Null<object>.ofDynamic<int>(( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )));
				}
				
				
				case 1623148745:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.indexOf(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]), global::haxe.lang.Null<object>.ofDynamic<int>(( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )));
				}
				
				
				case 1532710347:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					this.concatNative(((T[]) (dynargs[0]) ));
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					break;
				}
				
				
				case 1204816148:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return this.concat(((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (dynargs[0]) ))) ));
				}
				
				
				default:
				{
					#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
					return base.__hx_invokeField(field, hash, dynargs);
				}
				
			}
			
			#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
			return null;
		}
		#line default
	}
	
	
	public override void __hx_getFields(global::Array<string> baseArr) {
		#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
		baseArr.push("__a");
		#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
		baseArr.push("length");
		#line 28 "/usr/share/haxe/std/cs/_std/Array.hx"
		base.__hx_getFields(baseArr);
	}
	#line default
	
	public T this[int index]{
		get{
			return this.__get(index);
		}
		set{
			this.__set(index,value);
		}
	}
	object global::Array.this[int key]{
		get{
			return ((object) this.__get(key));
		}
		set{
			this.__set(key, (T) value);
		}
	}
	
	
	public override string ToString(){
		return this.toString();
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
[global::haxe.lang.GenericInterface(typeof(global::Array<object>))]
public interface Array : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
	
	object Array_cast<T_c>();
	
	string @join(string sep);
	
	void reverse();
	
	void spliceVoid(int pos, int len);
	
	string toString();
	
	string __hx_toString();
	
	object iterator();
	
	void resize(int len);
	
	object this[int key]{
		get;
		set;
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace _Array {
	public sealed class ArrayIterator<T> : global::haxe.lang.HxObject, global::_Array.ArrayIterator {
		
		public ArrayIterator(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ArrayIterator(global::Array<T> a) {
			#line 469 "/usr/share/haxe/std/cs/_std/Array.hx"
			global::_Array.ArrayIterator<object>.__hx_ctor__Array_ArrayIterator<T>(((global::_Array.ArrayIterator<T>) (this) ), ((global::Array<T>) (a) ));
		}
		#line default
		
		private static void __hx_ctor__Array_ArrayIterator<T_c>(global::_Array.ArrayIterator<T_c> __hx_this, global::Array<T_c> a) {
			#line 470 "/usr/share/haxe/std/cs/_std/Array.hx"
			__hx_this.arr = a;
			__hx_this.len = a.length;
			#line 472 "/usr/share/haxe/std/cs/_std/Array.hx"
			__hx_this.i = 0;
		}
		#line default
		
		public static object __hx_cast<T_c_c>(global::_Array.ArrayIterator me) {
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			return ( (( me != null )) ? (me._Array_ArrayIterator_cast<T_c_c>()) : default(object) );
		}
		#line default
		
		public object _Array_ArrayIterator_cast<T_c>() {
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			if (global::haxe.lang.Runtime.eq(typeof(T), typeof(T_c))) {
				#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
				return this;
			}
			
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			global::_Array.ArrayIterator<T_c> new_me = new global::_Array.ArrayIterator<T_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			global::Array<string> fields = global::Reflect.fields(this);
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			int i = 0;
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			while (( i < fields.length )) {
				#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
				string field = fields[i++];
				#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			return new_me;
		}
		#line default
		
		public global::Array<T> arr;
		
		public int len;
		
		public int i;
		
		public bool hasNext() {
			#line 476 "/usr/share/haxe/std/cs/_std/Array.hx"
			return ( this.i < this.len );
		}
		#line default
		
		public T next() {
			#line 479 "/usr/share/haxe/std/cs/_std/Array.hx"
			return this.arr[this.i++];
		}
		#line default
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
				switch (hash) {
					case 105:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						this.i = ((int) (@value) );
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return @value;
					}
					
					
					case 5393365:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						this.len = ((int) (@value) );
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return @value;
					}
					
					
					default:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
				switch (hash) {
					case 105:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						this.i = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return @value;
					}
					
					
					case 5393365:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						this.len = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return @value;
					}
					
					
					case 4849249:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						this.arr = ((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (@value) ))) );
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return @value;
					}
					
					
					default:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
				switch (hash) {
					case 1224901875:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 407283053:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "hasNext", 407283053)) );
					}
					
					
					case 105:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return this.i;
					}
					
					
					case 5393365:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return this.len;
					}
					
					
					case 4849249:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return this.arr;
					}
					
					
					default:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
				switch (hash) {
					case 105:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return ((double) (this.i) );
					}
					
					
					case 5393365:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return ((double) (this.len) );
					}
					
					
					default:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
				switch (hash) {
					case 1224901875:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return this.next();
					}
					
					
					case 407283053:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return this.hasNext();
					}
					
					
					default:
					{
						#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			baseArr.push("i");
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			baseArr.push("len");
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			baseArr.push("arr");
			#line 464 "/usr/share/haxe/std/cs/_std/Array.hx"
			base.__hx_getFields(baseArr);
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace _Array {
	[global::haxe.lang.GenericInterface(typeof(global::_Array.ArrayIterator<object>))]
	public interface ArrayIterator : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object _Array_ArrayIterator_cast<T_c>();
		
		bool hasNext();
		
	}
}


