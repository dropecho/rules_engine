// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class Blackboard {
	constructor() {
		this.facts = new haxe_ds_StringMap();
	}
}
$hx_exports["Blackboard"] = Blackboard;
Blackboard.__name__ = true;
var OPERATOR = $hxEnums["OPERATOR"] = { __ename__ : true, __constructs__ : ["GT","GTE","LT","LTE","EQ","NEQ"]
	,GT: {_hx_index:0,__enum__:"OPERATOR",toString:$estr}
	,GTE: {_hx_index:1,__enum__:"OPERATOR",toString:$estr}
	,LT: {_hx_index:2,__enum__:"OPERATOR",toString:$estr}
	,LTE: {_hx_index:3,__enum__:"OPERATOR",toString:$estr}
	,EQ: {_hx_index:4,__enum__:"OPERATOR",toString:$estr}
	,NEQ: {_hx_index:5,__enum__:"OPERATOR",toString:$estr}
};
class ConditionResult {
	constructor(con,res) {
		this.condition = con;
		this.matches = res;
		this.reason = con.fact + " should be " + Std.string(con.op) + " " + Std.string(con.value);
	}
}
$hx_exports["ConditionResult"] = ConditionResult;
ConditionResult.__name__ = true;
class Condition {
	constructor() {
		this.value = null;
		this.op = OPERATOR.EQ;
		this.fact = "";
	}
	matches(bb) {
		var key = this.fact;
		var _this = bb.facts;
		var val = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		switch(this.op._hx_index) {
		case 0:
			return val > this.value;
		case 1:
			return val >= this.value;
		case 2:
			return val < this.value;
		case 3:
			return val <= this.value;
		case 4:
			return val == this.value;
		case 5:
			return val != this.value;
		}
	}
	result(bb) {
		return new ConditionResult(this,this.matches(bb));
	}
}
$hx_exports["Condition"] = Condition;
Condition.__name__ = true;
class Engine {
	constructor() {
		this.blackboard = new Blackboard();
		this.rules = [];
	}
	run() {
	}
}
$hx_exports["Engine"] = Engine;
Engine.__name__ = true;
Math.__name__ = true;
class RuleResult {
	constructor(rule,conditionResults) {
		this.conditionResults = [];
		this.rule = rule;
		if(conditionResults != null) {
			this.conditionResults = conditionResults;
		}
	}
}
RuleResult.__name__ = true;
class Rule {
	constructor() {
		this.conditions = [];
	}
	matches(bb) {
		var _g = 0;
		var _g1 = this.conditions;
		while(_g < _g1.length) {
			var con = _g1[_g];
			++_g;
			if(con.matches(bb) == false) {
				return false;
			}
		}
		return true;
	}
	result(bb) {
		var result = new RuleResult(this);
		result.matches = true;
		var _g = 0;
		var _g1 = this.conditions;
		while(_g < _g1.length) {
			var con = _g1[_g];
			++_g;
			var conRes = con.result(bb);
			result.conditionResults.push(conRes);
			if(conRes.matches == false) {
				result.matches = false;
			}
		}
		return result;
	}
}
$hx_exports["Rule"] = Rule;
Rule.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
class haxe_ds_StringMap {
	constructor() {
		this.h = { };
	}
	getReserved(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
}
haxe_ds_StringMap.__name__ = true;
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
}
js__$Boot_HaxeError.__name__ = true;
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				var e = $hxEnums[o.__enum__];
				var n = e.__constructs__[o._hx_index];
				var con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						var _g = [];
						{
							var _g1 = 0;
							var _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								var p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = o.length;
				while(_g3 < _g11) {
					var i = _g3++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			var k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
RuleResult.__meta__ = { obj : { expose : null}};
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {});
